<Window x:Class="SizeOnDisk.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:cmd="http://wpfbyyourcommand.codeplex.com"
        xmlns:lex="http://wpflocalizeextension.codeplex.com"
        xmlns:conv="clr-namespace:SizeOnDisk.Converters"
        xmlns:vm="clr-namespace:SizeOnDisk.ViewModel"
        Style="{StaticResource WindowStyle}"
        mc:Ignorable="d" 
        cmd:CommandBehavior.Context="{Binding}"
        MinWidth="200"
        MinHeight="150"
        Height="600"
        Width="1050"
        Title="{Binding Path=SelectedRootFolder.Path, StringFormat=SizeOnDisk - \{0\}, FallbackValue=SizeOnDisk}"
        ResizeMode="CanResizeWithGrip"
        d:DataContext="{d:DesignInstance {x:Type vm:VMRootHierarchy}, IsDesignTimeCreatable=True}"
        Loaded="Window_Loaded" Closing="Window_Closing">
    <Window.DataContext>
        <vm:VMRootHierarchy />
    </Window.DataContext>
    <Window.Resources>
        <ContextMenu x:Key="VMContextMenu" DataContext="{Binding PlacementTarget.SelectedItem, RelativeSource={RelativeSource Self}}"
                     ItemsSource="{Binding Details.FileCommands}" />
    </Window.Resources>
    <DockPanel 
        cmd:CommandBehavior.Context="{Binding SelectedRootFolder}">
        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar>
                <Button cmd:CommandBehavior.Command="{x:Static vm:VMRootHierarchy.OpenFolderCommand}" Padding="3" />
                <Button cmd:CommandBehavior.Command="{x:Static vm:VMRootFolder.RefreshCommand}" Padding="3" />
                <Button cmd:CommandBehavior.Command="{x:Static vm:VMRootFolder.StopCommand}" Padding="3" />
                <Button cmd:CommandBehavior.Command="{x:Static vm:VMRootFolder.CloseCommand}" Padding="3" />
                <Button ToolTip="Errors" IsEnabled="{Binding SelectedRootFolder.Logs.Count, Converter={cmd:IsNotEqualConverter}, ConverterParameter=0, FallbackValue=False}" Click="Button_Click" Padding="3">
                    <cmd:AutoDisablingImage Source="../Icons/Log.png" />
                </Button>
                <Separator />
                <ToggleButton ToolTip="Details view" IsChecked="{Binding SelectedRootFolder.ViewMode, Mode=TwoWay, Converter={StaticResource IsEqualConverter},ConverterParameter={x:Static vm:VMViewMode.Details}}" Padding="3">
                    <Image Source="../Icons/Detail.png" />
                </ToggleButton>
                <ToggleButton ToolTip="List view" IsChecked="{Binding SelectedRootFolder.ViewMode, Mode=TwoWay, Converter={StaticResource IsEqualConverter},ConverterParameter={x:Static vm:VMViewMode.Tile}}" Padding="3">
                    <Image Source="../Icons/List.png" />
                </ToggleButton>
                <Separator />
                <Button ToolTip="{lex:Loc Legend}" Click="ButtonLegend_Click" Padding="3">
                    <Image Source="../Icons/LegendHS.png" />
                </Button>
                <Button Name="RunAsAdmin" Click="RunAsAdmin_Click" ToolTip="{lex:Loc RunAsAdministrator}" Padding="3">
                    <cmd:AutoDisablingImage Source="../Icons/Shield.png" />
                </Button>
                <Button ToolTip="{lex:Loc Options}" Click="ButtonOptions_Click" Padding="3">
                    <Image Source="../Icons/Options.png" />
                </Button>
                <Button Click="AboutButton_Click" Padding="3">
                    <Image Source="../Icons/Help.png" />
                </Button>
            </ToolBar>
        </ToolBarTray>
        <Expander Margin="1" Padding="1" DockPanel.Dock="Top">
            <Expander.Template>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" MinWidth="0" MinHeight="0" Padding="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ToggleButton.FocusVisualStyle>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Border>
                                                        <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.FocusVisualStyle>
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border Padding="{TemplateBinding Padding}">
                                                        <Grid Background="Transparent">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="2"/>
                                                                <ColumnDefinition Width="16"/>
                                                                <ColumnDefinition Width="*"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Ellipse Grid.Column="1" Opacity="0.6" x:Name="circle" Fill="White" HorizontalAlignment="Center" Height="16" Stroke="#FF333333" StrokeThickness="1" VerticalAlignment="Center" Width="16"/>
                                                            <Path Grid.Column="1" Opacity="0.6" x:Name="arrow" Data="M0,0L4,6L8,0" HorizontalAlignment="Center" Stroke="#FF333333" StrokeThickness="1" VerticalAlignment="Center"/>
                                                            <ContentPresenter Grid.Column="2" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                                        </Grid>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter Property="Data" TargetName="arrow" Value="M0,6L4,0 8,6"/>
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                            <Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>
                                                            <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                            <Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>
                                                            <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                            <Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>
                                                            <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <ContentPresenter x:Name="ExpandSite" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Expander.Template>
            <Expander.Header>
                <TextBox Text="{Binding SelectedRootFolder.SelectedListItem.Path,Mode=OneWay}"
                             IsReadOnlyCaretVisible="True" IsReadOnly="True" />
            </Expander.Header>
            <Grid cmd:GlobalizationBehavior.UpdateChildsBindings=",UISize">
                <Grid.Resources>
                    <Style TargetType="{x:Type TextBox}">
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="IsReadOnly" Value="True" />
                        <Setter Property="IsReadOnlyCaretVisible" Value="True" />
                    </Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="HorizontalAlignment" Value="Right" />
                        <Setter Property="Margin" Value="5,0" />
                    </Style>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <TextBox Grid.ColumnSpan="2" HorizontalAlignment="Center" Text="{Binding SelectedRootFolder.HardDrivePath, Mode=OneWay}" />
                <TextBlock Grid.Row="1" Text="Hard drive size" />
                <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SelectedRootFolder.HardDriveSize,Converter={conv:SizeConverter}, Mode=OneWay}" />
                <TextBlock Grid.Row="2" Text="{lex:Loc HardDriveUsage}" />
                <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding SelectedRootFolder.HardDriveUsage,Converter={conv:SizeConverter}, Mode=OneWay}" />
                <TextBlock Grid.Row="3" Text="{lex:Loc HardDriveFree}" />
                <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding SelectedRootFolder.HardDriveFree,Converter={conv:SizeConverter}, Mode=OneWay}" />

                <TextBlock Grid.Row="5" Text="Status" />
                <TextBox Grid.Row="5" Grid.Column="1" Text="{Binding SelectedRootFolder.ExecutionState, Converter={conv:IsRunningConverter}, FallbackValue=..., Mode=OneWay}" />
                <TextBlock Grid.Row="6" Text="Running time" />
                <TextBox Grid.Row="6" Grid.Column="1" Text="{Binding SelectedRootFolder.RunTime, Mode=OneWay}" />
                <TextBlock Grid.Row="7" Text="Threads" />
                <TextBox Grid.Row="7" Grid.Column="1" Text="{Binding RunningThreads, Mode=OneWay}" />

                <TextBox Grid.Column="2" Grid.ColumnSpan="2" HorizontalAlignment="Center" Text="{Binding SelectedRootFolder.Path, Mode=OneWay}" />
                <TextBlock Grid.Row="1" Grid.Column="2" Text="Total file size" />
                <TextBox Grid.Row="1" Grid.Column="3" Text="{Binding SelectedRootFolder.FileSize,Converter={conv:SizeConverter}, Mode=OneWay}" />
                <TextBlock Grid.Row="2" Grid.Column="2" Text="Total disk size" />
                <TextBox Grid.Row="2" Grid.Column="3" Text="{Binding SelectedRootFolder.DiskSize,Converter={conv:SizeConverter}, Mode=OneWay}" />
                <TextBlock Grid.Row="3" Grid.Column="2" Text="Total number of folders" />
                <TextBox Grid.Row="3" Grid.Column="3" Text="{Binding SelectedRootFolder.FolderTotal, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="4" Grid.Column="2" Text="Total number of files" />
                <TextBox Grid.Row="4" Grid.Column="3" Text="{Binding SelectedRootFolder.FileTotal, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="5" Grid.Column="2" Text="Number of folders" />
                <TextBox Grid.Row="5" Grid.Column="3" Text="{Binding SelectedRootFolder.Folders.Count, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="6" Grid.Column="2" Text="Number of files" />
                <TextBox Grid.Row="6" Grid.Column="3" Text="{Binding SelectedRootFolder.FileCount, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="7" Grid.Column="2" Text="Number of items" />
                <TextBox Grid.Row="7" Grid.Column="3" Text="{Binding SelectedRootFolder.Childs.Count, StringFormat=N0, Mode=OneWay}" />

                <TextBox Grid.Column="4" Grid.ColumnSpan="2" HorizontalAlignment="Center" Text="{Binding SelectedRootFolder.SelectedTreeItem.Path, Mode=OneWay}" />
                <TextBlock Grid.Row="1" Grid.Column="4" Text="Total file size" />
                <TextBox Grid.Row="1" Grid.Column="5" Text="{Binding SelectedRootFolder.SelectedTreeItem.FileSize,Converter={conv:SizeConverter}, Mode=OneWay}" />
                <TextBlock Grid.Row="2" Grid.Column="4" Text="Total disk size" />
                <TextBox Grid.Row="2" Grid.Column="5" Text="{Binding SelectedRootFolder.SelectedTreeItem.DiskSize,Converter={conv:SizeConverter}, Mode=OneWay}" />
                <TextBlock Grid.Row="3" Grid.Column="4" Text="Total number of folders" />
                <TextBox Grid.Row="3" Grid.Column="5" Text="{Binding SelectedRootFolder.SelectedTreeItem.FolderTotal, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="4" Grid.Column="4" Text="Total number of files" />
                <TextBox Grid.Row="4" Grid.Column="5" Text="{Binding SelectedRootFolder.SelectedTreeItem.FileTotal, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="5" Grid.Column="4" Text="Number of folders" />
                <TextBox Grid.Row="5" Grid.Column="5" Text="{Binding SelectedRootFolder.SelectedTreeItem.Folders.Count, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="6" Grid.Column="4" Text="Number of files" />
                <TextBox Grid.Row="6" Grid.Column="5" Text="{Binding SelectedRootFolder.SelectedTreeItem.FileCount, StringFormat=N0, Mode=OneWay}" />
                <TextBlock Grid.Row="7" Grid.Column="4" Text="Number of items" />
                <TextBox Grid.Row="7" Grid.Column="5" Text="{Binding SelectedRootFolder.SelectedTreeItem.Childs.Count, StringFormat=N0, Mode=OneWay}" />
            </Grid>
        </Expander>
        <StatusBar DockPanel.Dock="Bottom"
                   Grid.Row="3"
                   cmd:GlobalizationBehavior.UpdateItemsBindings=",UISize">
            <StatusBar.Resources>
                <Style x:Key="{x:Type StatusBarItem}" TargetType="StatusBarItem">
                    <Setter Property="Padding" Value="4,2,4,3" />
                </Style>
            </StatusBar.Resources>
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="12" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Content="{Binding SelectedRootFolder.ExecutionState, Converter={conv:IsRunningConverter}, FallbackValue=...}" />
            <Separator Grid.Column="1" />
            <StatusBarItem Grid.Column="2"
                           Content="{Binding SelectedRootFolder.RunTime}" />

            <StatusBarItem Grid.Column="6"
                           Content="{Binding SelectedRootFolder.SelectedTreeItem.Folders.Count}"
                           ContentStringFormat="N0"
                           ToolTip="{lex:Loc TotalFolders}" />
            <Separator Grid.Column="7" />
            <StatusBarItem Grid.Column="8"
                           Content="{Binding SelectedRootFolder.SelectedTreeItem.FileCount}"
                           ContentStringFormat="N0"
                           ToolTip="{lex:Loc TotalFiles}" />
            <Separator Grid.Column="9" />
            <StatusBarItem Grid.Column="10"
                           Content="{Binding SelectedRootFolder.SelectedTreeItem.FolderTotal}"
                           ContentStringFormat="N0"
                           ToolTip="{lex:Loc TotalFolders}" />
            <Separator Grid.Column="11" />
            <StatusBarItem Grid.Column="12"
                           Content="{Binding SelectedRootFolder.SelectedTreeItem.FileTotal}"
                           ContentStringFormat="N0"
                           ToolTip="{lex:Loc TotalFiles}" />
            <Separator Grid.Column="13" />
            <StatusBarItem Grid.Column="14"
                           Content="{Binding SelectedRootFolder.SelectedTreeItem.FileSize, Converter={conv:SizeConverter}}"
                           ToolTip="{lex:Loc TotalFileSize}" />
            <Separator Grid.Column="15" />
            <StatusBarItem Grid.Column="16"
                           Content="{Binding SelectedRootFolder.SelectedTreeItem.DiskSize, Converter={conv:SizeConverter}}"
                           ToolTip="{lex:Loc TotalDiskSize}" />
            <Separator Grid.Column="17" />
            <StatusBarItem Grid.Column="18"
                           Content="{Binding SelectedRootFolder.HardDrivePath}"
                           ToolTip="{lex:Loc HardDriveUsage}" />
            <Separator Grid.Column="19" />
            <StatusBarItem Grid.Column="20"
                           Content="{Binding SelectedRootFolder.HardDriveUsage,Converter={conv:SizeConverter}}"
                           ToolTip="{lex:Loc HardDriveUsage}" />
            <Separator Grid.Column="21" />
            <StatusBarItem Grid.Column="22"
                           Content="{Binding SelectedRootFolder.HardDriveFree,Converter={conv:SizeConverter}}"
                           ToolTip="{lex:Loc HardDriveFree}" />
        </StatusBar>

        <TabControl ItemsSource="{Binding Folders}" SelectedItem="{Binding SelectedRootFolder}" Margin="1">
            <TabControl.ItemTemplate>
                <DataTemplate>
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Margin="-6,-1">
                        <TextBlock Name="Textbox" Margin="3,4,3,0" Panel.ZIndex="42" Text="{Binding Name}" ToolTip="{Binding Path}" MinWidth="60" TextAlignment="Center" />
                        <ProgressBar VerticalAlignment="Top" Height="4" Background="Transparent" IsIndeterminate="{Binding ExecutionState, Converter={conv:IsRunningConverter}}" BorderThickness="0" />
                    </Grid>
                </DataTemplate>
            </TabControl.ItemTemplate>
            <TabControl.ContentTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="275" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <TreeView BorderThickness="1"
                              ItemsSource="{Binding DummyMe}"
                              ContextMenu="{StaticResource VMContextMenu}"
                              DisplayMemberPath="Name"
                              cmd:ControlBehavior.FocusMouseRightButtonDown="True">
                            <TreeView.ItemContainerStyle>
                                <Style TargetType="{x:Type TreeViewItem}">
                                    <Setter Property="cmd:TreeViewItemBehavior.IsBroughtIntoViewWhenSelected" Value="True" />
                                    <Setter Property="Padding" Value="3,0,3,1" />
                                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                                    <Setter Property="IsSelected" Value="{Binding IsTreeSelected, Mode=TwoWay}" />
                                    <Setter Property="ItemsSource" Value="{Binding Folders}" />
                                    <Setter Property="HeaderTemplate">
                                        <Setter.Value>
                                            <DataTemplate >
                                                <TextBlock Text="{Binding Name}" Style="{StaticResource ColoredName}" ToolTip="{Binding Name}" />
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TreeView.ItemContainerStyle>
                        </TreeView>
                        <GridSplitter Grid.Column="1"
                          ResizeBehavior="PreviousAndNext"
                          ResizeDirection="Columns"
                          Width="6"
                          Background="Transparent"
                          VerticalAlignment="Stretch" />
                        <ListView Grid.Column="2"
                                ItemsSource="{Binding SelectedTreeItem.Childs}"
                                BorderThickness="1"
                                SelectedItem="{Binding SelectedItem}"
                                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                ContextMenu="{StaticResource VMContextMenu}"
                                cmd:SelectorBehavior.SyncIsSelectedWhenSelected="IsSelected"
                                Panel.ZIndex="{Binding ViewMode, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter={x:Static vm:VMViewMode.Tile}}">
                            <ListView.Resources>
                                <Style TargetType="ListViewItem">
                                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    <EventSetter Event="MouseDoubleClick" Handler="Selector_MouseDoubleClick"/>
                                </Style>
                            </ListView.Resources>
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <cmd:VirtualizingWrapPanel ItemHeight="152" ItemWidth="120" />
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid Height="150" HorizontalAlignment="Stretch" Width="110">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="96" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid Width="96" Height="96" HorizontalAlignment="Center" VerticalAlignment="Bottom"  IsEnabled="{Binding Attributes, Converter={cmd:IsNotEqualConverter}, ConverterParameter=Hidden}">
                                            <Image Panel.ZIndex="42" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Bottom" Source="pack://application:,,,/SizeOnDisk;component/Icons/Shortcut-big.png" 
                                                   Visibility="{Binding IsLink, Converter={StaticResource IsEqualConverter}, ConverterParameter=True}" />
                                            <cmd:AutoDisablingImage Stretch="None" Source="{Binding Details.Thumbnail}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        </Grid>
                                        <TextBlock Grid.Row="1" Style="{StaticResource ColoredName}" Text="{Binding Name}" MaxHeight="50" TextAlignment="Center" TextWrapping="Wrap" ToolTip="{Binding Name}" TextTrimming="CharacterEllipsis" />
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListView>
                        <DataGrid 
                                cmd:GlobalizationBehavior.UpdateItemsDefaultView=",UISize"
                                Grid.Column="2"
                                VirtualizingStackPanel.VirtualizationMode="Standard"
                                cmd:SelectorBehavior.IsBroughtIntoViewWhenSelected="True"
                                cmd:SelectorBehavior.SyncIsSelectedWhenSelected="IsSelected"
                                BorderThickness="1"
                                ItemsSource="{Binding SelectedTreeItem.Childs}"
                                SelectedItem="{Binding SelectedItem}"
                                AutoGenerateColumns="False"
                                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                HeadersVisibility="Column"
                                ContextMenu="{StaticResource VMContextMenu}"
                                HorizontalGridLinesBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                VerticalGridLinesBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                ClipboardCopyMode="IncludeHeader"
                                Panel.ZIndex="{Binding ViewMode, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter={x:Static vm:VMViewMode.Details}}">
                            <DataGrid.Resources>
                                <Style x:Key="RightAlignStyle" TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextAlignment" Value="Right" />
                                </Style>
                                <Style TargetType="DataGridRow">
                                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    <EventSetter Event="MouseDoubleClick" Handler="Selector_MouseDoubleClick"/>
                                </Style>
                                <Style TargetType="DataGridCell">
                                    <Setter Property="Padding" Value="1,0" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type DataGridCell}">
                                                <Border Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </DataGrid.Resources>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn SortMemberPath="IsFile" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Grid Width="16" Height="16" IsEnabled="{Binding Attributes, Converter={cmd:IsNotEqualConverter}, ConverterParameter=Hidden}">
                                                <Image Stretch="None" Panel.ZIndex="42" HorizontalAlignment="Left" VerticalAlignment="Bottom" Source="pack://application:,,,/SizeOnDisk;component/Icons/Shortcut-small.png" 
                                                       Visibility="{Binding IsLink, Converter={StaticResource IsEqualConverter}, ConverterParameter=True}" />
                                                <cmd:AutoDisablingImage Stretch="None" Source="{Binding Details.Icon}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                            </Grid>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Header="{lex:Loc Name}"
                                        Binding="{Binding Name}"
                                        ElementStyle="{StaticResource ColoredName}" />
                                <DataGridTextColumn Header="Ext"
                                        IsReadOnly="True"
                                        Binding="{Binding Extension}" />
                                <DataGridTextColumn Header="{lex:Loc FileType}"
                                        IsReadOnly="True"
                                        Binding="{Binding Details.FileType}" />
                                <DataGridTextColumn Binding="{Binding Attributes,Converter={conv:FileAttributesConverter}}"
                                        Header="{lex:Loc Attributes}"
                                        IsReadOnly="True" />
                                <DataGridTextColumn Header="{lex:Loc FolderTotal}"
                                        ElementStyle="{StaticResource RightAlignStyle}"
                                        Binding="{Binding FolderTotal,StringFormat=N0}"
                                        IsReadOnly="True" />
                                <DataGridTextColumn Header="{lex:Loc FileTotal}"
                                        ElementStyle="{StaticResource RightAlignStyle}"
                                        Binding="{Binding FileTotal,StringFormat=N0}"
                                        IsReadOnly="True" />
                                <DataGridTextColumn Header="{lex:Loc FileSize}"
                                        ElementStyle="{StaticResource RightAlignStyle}"
                                        Binding="{Binding FileSize,Converter={conv:SizeConverter}}"
                                        IsReadOnly="True" />
                                <DataGridTextColumn Header="{lex:Loc DiskSize}"
                                        ElementStyle="{StaticResource RightAlignStyle}"
                                        Binding="{Binding DiskSize,Converter={conv:SizeConverter}}"
                                        IsReadOnly="True" />
                                <DataGridTextColumn Binding="{Binding Details.CreationTime}"
                                        Header="{lex:Loc DateCreation}"
                                        IsReadOnly="True" />
                                <DataGridTextColumn Binding="{Binding Details.LastAccessTime}"
                                        Header="{lex:Loc DateLastAccess}"
                                        IsReadOnly="True" />
                                <DataGridTextColumn Binding="{Binding Details.LastWriteTime}"
                                        Header="{lex:Loc DateLastWrite}"
                                        IsReadOnly="True" />
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </DataTemplate>
            </TabControl.ContentTemplate>
        </TabControl>
    </DockPanel>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo ProgressState="{Binding IsRunning, Converter={conv:IsRunningConverter}}" />
    </Window.TaskbarItemInfo>
</Window>
